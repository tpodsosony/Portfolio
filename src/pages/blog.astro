---
import '../styles/article-list.css';

import { getCollection } from "astro:content";
import Card from "../components/Card.astro";
import Icon from "../components/Icon.astro";
import Layout from "../layouts/Layout.astro";
import { openGraph } from 'spectre:globals';

const posts = await getCollection('posts', (post) => post.data.draft !== true);
const workExperience = await getCollection('workExperience')
---
<Layout
  title={openGraph.blog.title || "Blog"}
  description={openGraph.blog.description}
	pagefindIgnore
>
  <div class="layout-grid-left" slot="left">
    <Card class="flex-col-card">
      <h2 class="no-mt">Contact me</h2>
      <ul class ="overview-list">
         <!-- Form action API Endpoint  -->
        <form action="https://api.web3forms.com/submit" method="POST" id="form">

        <input type="hidden" name="access_key" value="d4997bf7-005e-49be-966d-9d2d80433397">

        <input type="hidden" name="subject" value="New message from Tal's Portfolio">

        <input type="hidden" name="from_name" value="Tal's Portfolio"> 

         <li>
          <Icon type='lucide' name="circle-user" width={24} height={24} class='glow-icon' /> 
        <input type="text" name="name" placeholder="Name" required>
         </li>
        <li>
          <Icon type='lucide' name="mail" width={24} height={24} class='glow-icon' />
        <input type="email" name="email" placeholder="Email" required>
        </li>
        
        <li>
          <Icon type='lucide' name="pen" width={24} height={24} class='glow-icon' />
          <textarea name="message" placeholder="Message" required></textarea>
        </li>
        <li>
          <div class="h-captcha" data-captcha="true"></div>

        </li>
        <li>
          <Icon type='lucide' name="check" width={24} height={24} class='glow-icon' />
          <button type="submit">Send message</button>
        </li>


        

        </form>
        <script src="https://web3forms.com/client/script.js" async defer></script>

      </ul>
    </Card>
  </div>
  <div class="layout-grid-right" slot="right">
		<Card>
			<div class="header-container">
				<Icon type="lucide" name="rss" width={24} height={24} class='glow-icon' />
				<h2>Latest Posts</h2>
			</div>
			<div class="content-container">
				{posts.sort((a, b) => b.data.createdAt.getTime() - a.data.createdAt.getTime()).map((post) => (
					<a href={`/blog/${post.id}`} class="post-container" data-tags={post.data.tags.map((tag) => tag.id).join(",")}>
						<div class="post-header">
							<h3>{post.data.title}</h3>
							<span class="post-date">{post.data.createdAt.toLocaleDateString()}</span>
						</div>
						<span>{post.data.description}</span>
					</a>
				))}
			</div>
		</Card>
    <Card>
			<div class="header-container">
				<Icon type='lucide' name="briefcase-business" width={24} height={24} class='glow-icon' />
				<h2>Work Experience</h2>
			</div>
			<div class="work-experience-container">
				{workExperience.map((entry) => (
					<div class="work-experience-entry">
						<span class="work-experience-duration">{entry.data.duration}</span>
						<h3 class="work-experience-company">{entry.data.company}</h3>
						<span class="work-experience-role">{entry.data.title}</span>
						<p class="work-experience-desc">{entry.data.description}</p>
					</div>
				))}
			</div>
		</Card>
  </div>
  
</Layout>
<script>
  const tags = document.querySelectorAll<HTMLAnchorElement>('.blog-tag');
  const posts = document.querySelectorAll<HTMLAnchorElement>('.post-container');
  const url = new URL(window.location.href);
  const initialTags = url.searchParams.get('tags')?.split(',').filter((tag) => tag.length > 0) || [];
  const selectedTags = new Set(initialTags);

  function updatePostsVisibility() {
    posts.forEach((post) => {
      const postTags = post.dataset.tags!.split(',');
      // if there are selected tags and the post does not have all of them, hide the post
      if (selectedTags.size > 0 && ![...selectedTags].every((tag) => postTags.includes(tag))) {
        post.style.display = 'none';
      } else {
        post.style.display = '';
      }
    });
  }

  function updateURL() {
    // create a "clean" URL for the current page before adding the new query parameters
    const newUrl = new URL(window.location.pathname, window.location.origin);
    if (selectedTags.size > 0) {
      newUrl.searchParams.set('tags', [...selectedTags].join(','));
    }
    history.pushState({ tags: [...selectedTags] }, '', newUrl);
  }

  tags.forEach((tag) => {
    const tagValue = tag.dataset.tag!;
    if (selectedTags.has(tagValue)) {
      tag.classList.add('active');
    }

    tag.addEventListener('click', (event) => {
      event.preventDefault();

      tag.classList.toggle('active');

      if (selectedTags.has(tagValue)) {
        selectedTags.delete(tagValue);
      } else {
        selectedTags.add(tagValue);
      }

      updatePostsVisibility();
      updateURL();
    });
  });

  updatePostsVisibility();
</script>
